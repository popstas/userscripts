const fs = require('fs/promises');
const path = require('path');

const projectRoot = path.resolve(__dirname, '..', '..');
const userscriptsDir = path.join(projectRoot, 'src', 'userscripts');
const dataPath = path.join(userscriptsDir, 'userscripts.json');
const readmePath = path.join(userscriptsDir, 'README.md');

function formatList(values, transform = (value) => value) {
  if (!values || values.length === 0) {
    return '—';
  }

  return values.map((value) => transform(value)).join(', ');
}

function formatAssets(assets) {
  if (!assets || assets.length === 0) {
    return '—';
  }

  return assets
    .map((asset) => {
      const label = path.basename(asset);
      return `[${label}](${path.posix.join('..', '..', asset.replace(/\\\\/g, '/'))})`;
    })
    .join(', ');
}

async function generateReadme() {
  const raw = await fs.readFile(dataPath, 'utf8');
  const scripts = JSON.parse(raw);

  const lines = [
    '# Userscripts',
    '',
    '> Generated by `npm run generate`.',
    '',
  ];

  scripts.forEach((script) => {
    lines.push(`## ${script.name}`);
    lines.push('');
    lines.push(`- **File:** \`${script.file}\``);
    lines.push(`- **Version:** ${script.version}`);
    lines.push(`- **Description:** ${script.description}`);
    lines.push(
      `- **Matches:** ${formatList(script.match, (value) => '`' + value + '`')}`
    );
    lines.push(
      `- **Grants:** ${formatList(script.grant, (value) => '`' + value + '`')}`
    );
    lines.push(`- **Demo assets:** ${formatAssets(script.assets)}`);
    lines.push('');
  });

  await fs.writeFile(readmePath, `${lines.join('\n')}\n`, 'utf8');

  return { readmePath, scripts: scripts.length };
}

async function main() {
  try {
    const result = await generateReadme();
    console.log(
      `Generated README for ${result.scripts} userscript${
        result.scripts === 1 ? '' : 's'
      }.`
    );
  } catch (error) {
    console.error(error.message);
    process.exitCode = 1;
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  generateReadme,
};
