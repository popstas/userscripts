const fs = require('fs/promises');
const path = require('path');

const projectRoot = path.resolve(__dirname, '..', '..');
const userscriptsDir = path.join(projectRoot, 'src', 'userscripts');
const dataPath = path.join(userscriptsDir, 'userscripts.json');
const readmePath = path.join(userscriptsDir, 'README.md');

function formatInlineList(values) {
  if (!values || values.length === 0) {
    return '—';
  }

  return values.map((value) => '`' + value + '`').join(', ');
}

function formatDescription(description) {
  if (!description || !description.trim()) {
    return '—';
  }

  return description.trim();
}

function resolveFromReadme(targetPath) {
  return path.posix.join('..', '..', targetPath.replace(/\\/g, '/'));
}

function formatDemoSection(lines, assets) {
  if (!assets || assets.length === 0) {
    return;
  }

  lines.push('**Demo:**');

  assets.forEach((asset) => {
    const label = path.basename(asset);
    lines.push(`![${label}](${resolveFromReadme(asset)})`);
  });
}

async function generateReadme() {
  const raw = await fs.readFile(dataPath, 'utf8');
  const scripts = JSON.parse(raw);

  const lines = [
    '# Userscripts',
    '',
    '> Generated by `npm run generate`.',
    '',
  ];

  scripts.forEach((script) => {
    const filename = path.basename(script.file);

    lines.push(`## ${script.name} ${script.version}`);
    lines.push('');
    lines.push(`- **Install:** [${filename}](${script.rawUrl})`);
    lines.push(
      `- **File:** [\`${filename}\`](${resolveFromReadme(script.file)})`
    );
    lines.push(`- **Matches:** ${formatInlineList(script.match)}`);
    lines.push(`- **Grants:** ${formatInlineList(script.grant)}`);
    lines.push('');
    lines.push(formatDescription(script.description));
    lines.push('');
    formatDemoSection(lines, script.assets);
    lines.push('');
  });

  lines.push('## Installation');
  lines.push('1. Install [Tampermonkey](https://www.tampermonkey.net/)');
  lines.push(
    '2. Go to [src/userscripts](src/userscripts), choose userscript you want to install'
  );
  lines.push(
    '3. Go to RAW of selected userscript, Tampermonkey should open it in editor'
  );
  lines.push('4. Click "Install" button');
  lines.push('');

  await fs.writeFile(readmePath, `${lines.join('\n')}\n`, 'utf8');

  return { readmePath, scripts: scripts.length };
}

async function main() {
  try {
    const result = await generateReadme();
    console.log(
      `Generated README for ${result.scripts} userscript${
        result.scripts === 1 ? '' : 's'
      }.`
    );
  } catch (error) {
    console.error(error.message);
    process.exitCode = 1;
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  generateReadme,
};
